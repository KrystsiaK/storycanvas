name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        working-directory: apps/backend
        run: npx prisma generate

      - name: Run Prisma migrations
        working-directory: apps/backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: npx prisma migrate deploy

      - name: Run backend tests
        working-directory: apps/backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          JWT_SECRET: test-secret-key-for-ci-pipeline-32chars
          OPENAI_API_KEY: sk-test-key
          NODE_ENV: test
          REDIS_ENABLED: false
        run: npm test

      - name: Run backend E2E tests
        working-directory: apps/backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          JWT_SECRET: test-secret-key-for-ci-pipeline-32chars
          OPENAI_API_KEY: sk-test-key
          NODE_ENV: test
          REDIS_ENABLED: false
        run: npm run test:e2e

  # Mobile Tests
  mobile-test:
    name: Mobile Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run mobile tests
        working-directory: apps/mobile
        run: npm test

  # Lint
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (backend)
        working-directory: apps/backend
        run: npm run lint --if-present || echo "No lint script found"

      - name: Run ESLint (mobile)
        working-directory: apps/mobile
        run: npm run lint --if-present || echo "No lint script found"

  # Build
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        working-directory: apps/backend
        env:
          DATABASE_URL: postgresql://user:pass@localhost:5432/db
          JWT_SECRET: build-time-secret-32-characters-long
          OPENAI_API_KEY: sk-dummy-key
        run: |
          npx prisma generate
          npm run build

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-dist
          path: apps/backend/dist

  # Docker Build (only on main branch)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/backend/Dockerfile
          push: false
          tags: storycanvas-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

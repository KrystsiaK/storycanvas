version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: storycanvas-postgres
    environment:
      POSTGRES_USER: storycanvas
      POSTGRES_PASSWORD: storycanvas_dev
      POSTGRES_DB: storycanvas
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U storycanvas"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: storycanvas-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: storycanvas-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: storycanvas
      RABBITMQ_DEFAULT_PASS: storycanvas_dev
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: storycanvas-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://storycanvas:storycanvas_dev@postgres:5432/storycanvas
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://storycanvas:storycanvas_dev@rabbitmq:5672
      JWT_SECRET: dev-secret-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./apps/backend/src:/app/apps/backend/src
    command: npm run dev --workspace=apps/backend

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

